* Ruby: Tips & Tricks
:PROPERTIES:
:CUSTOM_ID: page.title
:END:

** General

*** Rapidly Compute the CIDR Range
:PROPERTIES:
:CUSTOM_ID: rapidly-compute-the-cidr-range
:END:
Use =IPAddr#to_range=:

#+begin_example
irb(main):001> require "ipaddr"
=> true
irb(main):002> IPAddr.new("192.168.128.0/19").to_range
=> #<IPAddr: IPv4:192.168.128.0/255.255.255.255>..#<IPAddr: IPv4:192.168.159.255/255.255.255.255>
#+end_example

To check whether an IP address belongs to the range:

#+begin_example
irb(main):003> IPAddr.new("10.101.64.0/18") === "127.0.0.2"
=> false
#+end_example

** RSpec

*** Debugging a Failing Expectation

When a spec is failing, the displayed error cause is
truncated. Sometimes, it makes it difficult to understand what
happened.

To solve this, RSpec provides a way to control the length of the
output:

#+begin_src ruby
  RSpec::Support::ObjectFormatter.default_instance.max_formatted_output_length = 2000
#+end_src

Setting this to =nil= will not limit the output.

*** Silencing write to standard output

Some code may write to the standard output using the =Kernel#puts= or
=Kernel#print= which pollute the output when running =rspec=. To
silence the noisy code, we can add in a =before= block:

#+begin_src ruby
  before { allow($stdout).to receive(:puts) }
#+end_src

*** Mocking the production environment

In Rails, we sometimes need to validate a specific behaviour in
production environment. To simulate that, we can do something like:

#+begin_src ruby
  before do
    allow(Rails)
      .to receive(:env)
      .and_return(ActiveSupport::StringInquirer.new('production'))
  end
#+end_src
